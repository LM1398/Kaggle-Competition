{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b9082ee0-56c3-424c-bbce-7e29646c25fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "def main():\n",
    "\n",
    "    import matplotlib.pyplot as plt\n",
    "    import numpy as np\n",
    "    import pandas as pd\n",
    "    import seaborn as sns\n",
    "\n",
    "    titanic = pd.read_csv(\"/Users/leo/samurai/kaggle/titanic/data/train.csv\")\n",
    "\n",
    "    from sklearn.preprocessing import MinMaxScaler, StandardScaler\n",
    "\n",
    "    titanic[\"Fare\"] = StandardScaler().fit_transform(titanic[[\"Fare\"]])\n",
    "    titanic[\"Age\"] = MinMaxScaler().fit_transform(titanic[[\"Age\"]])\n",
    "    titanic[\"Pclass\"] = MinMaxScaler().fit_transform(titanic[[\"Pclass\"]])\n",
    "    titanic[\"Parch\"] = MinMaxScaler().fit_transform(titanic[[\"Parch\"]])\n",
    "    titanic[\"SibSp\"] = MinMaxScaler().fit_transform(titanic[[\"SibSp\"]])\n",
    "\n",
    "    titanic = titanic.dropna(subset=[\"Age\"])\n",
    "    titanic = titanic.dropna(subset=[\"Embarked\"])\n",
    "\n",
    "    dummies = pd.get_dummies(titanic[[\"Sex\", \"Embarked\"]])\n",
    "    titanic = pd.concat([titanic, dummies], axis=1)\n",
    "\n",
    "    titanic.drop(columns=[\"Ticket\", \"Name\", \"Cabin\", \"Embarked\", \"Sex\"], inplace=True)\n",
    "\n",
    "    test = pd.read_csv(\"/Users/leo/samurai/kaggle/titanic/data/test.csv\")\n",
    "\n",
    "    test[\"Fare\"] = StandardScaler().fit_transform(test[[\"Fare\"]])\n",
    "    test[\"Age\"] = MinMaxScaler().fit_transform(test[[\"Age\"]])\n",
    "    test[\"Pclass\"] = MinMaxScaler().fit_transform(test[[\"Pclass\"]])\n",
    "    test[\"Parch\"] = MinMaxScaler().fit_transform(test[[\"Parch\"]])\n",
    "    test[\"SibSp\"] = MinMaxScaler().fit_transform(test[[\"SibSp\"]])\n",
    "\n",
    "    test[\"Age\"].fillna(X_test.Age.mean(), inplace=True)\n",
    "    test[\"Fare\"].fillna(X_test.Fare.median(), inplace=True)\n",
    "\n",
    "    dummies2 = pd.get_dummies(test[[\"Sex\", \"Embarked\"]])\n",
    "    test = pd.concat([test, dummies2], axis=1)\n",
    "\n",
    "    test.drop(columns=[\"Ticket\", \"Name\", \"Cabin\", \"Embarked\", \"Sex\"], inplace=True)\n",
    "\n",
    "    X_train = titanic.drop(columns=\"Survived\").drop(columns=\"PassengerId\")\n",
    "    y_train = titanic[\"Survived\"]\n",
    "    X_test = test.drop(columns=\"PassengerId\")\n",
    "\n",
    "    from sklearn import tree\n",
    "    from sklearn.ensemble import RandomForestClassifier\n",
    "    from sklearn.linear_model import LogisticRegression\n",
    "    from sklearn.model_selection import cross_val_score\n",
    "    from sklearn.naive_bayes import GaussianNB\n",
    "    from sklearn.neighbors import KNeighborsClassifier\n",
    "    from sklearn.svm import SVC\n",
    "\n",
    "    lr = LogisticRegression(max_iter=2000,)\n",
    "    cv = cross_val_score(lr, X_train, y_train, cv=5)\n",
    "    print(cv)\n",
    "    print(cv.mean())\n",
    "\n",
    "    gnb = GaussianNB()\n",
    "    cv = cross_val_score(gnb, X_train, y_train, cv=5)\n",
    "    print(cv)\n",
    "    print(cv.mean())\n",
    "\n",
    "    dt = tree.DecisionTreeClassifier(random_state=1)\n",
    "    cv = cross_val_score(dt, X_train, y_train, cv=5)\n",
    "    print(cv)\n",
    "    print(cv.mean())\n",
    "\n",
    "    knn = KNeighborsClassifier()\n",
    "    cv = cross_val_score(knn, X_train, y_train, cv=5)\n",
    "    print(cv)\n",
    "    print(cv.mean())\n",
    "\n",
    "    rf = RandomForestClassifier(random_state=1)\n",
    "    cv = cross_val_score(rf, X_train, y_train, cv=5)\n",
    "    print(cv)\n",
    "    print(cv.mean())\n",
    "\n",
    "    svc = SVC(probability=True)\n",
    "    cv = cross_val_score(svc, X_train, y_train, cv=5)\n",
    "    print(cv)\n",
    "    print(cv.mean())\n",
    "\n",
    "    from sklearn.ensemble import VotingClassifier\n",
    "\n",
    "    voting_clf = VotingClassifier(\n",
    "        estimators=[\n",
    "            (\"lr\", lr),\n",
    "            (\"knn\", knn),\n",
    "            (\"rf\", rf),\n",
    "            (\"gnb\", gnb),\n",
    "            (\"svc\", svc),\n",
    "            (\"dt\", dt),\n",
    "        ],\n",
    "        voting=\"soft\",\n",
    "    )\n",
    "\n",
    "    from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "    mod = GridSearchCV(\n",
    "        estimator=voting_clf,\n",
    "        param_grid={\"max_iter\": [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]},\n",
    "        cv=5,\n",
    "    )\n",
    "    mod.fit(X_train, y_train)\n",
    "\n",
    "    cv = cross_val_score(voting_clf, X_train, y_train, cv=5)\n",
    "    print(cv)\n",
    "    print(cv.mean())\n",
    "\n",
    "    voting_clf.fit(X_train, y_train)\n",
    "    y_hat_base_vc = voting_clf.predict(X_test).astype(int)\n",
    "    basic_submission = {\"PassengerId\": test.PassengerId, \"Survived\": y_hat_base_vc}\n",
    "    base_submission = pd.DataFrame(data=basic_submission)\n",
    "    base_submission.to_csv(\"base_submission.csv\", index=False)\n",
    "\n",
    "    if __name__ == \"__main__\":\n",
    "        main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "toc-autonumbering": false
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
